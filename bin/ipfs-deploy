#!/usr/bin/env node

(async function() {
	// imported modules
	const CONSTANTS = require("./include/constants.js");
	const FileSystem = require("./include/FileSystem.js");
	const IPFS = require("./include/IPFS.js");
	const SSI = require("./include/SSI.js");

	// functions
	async function copyAllFiles() {
		await FileSystem.rm(CONSTANTS.DIR.IPFS, { force: true, recursive: true });
		const [addressesToCopy, filesToCopy] = await globalThis.Promise.all([FileSystem.readdir(CONSTANTS.DIR.WALLET.SOURCE), FileSystem.readdir(CONSTANTS.DIR)]);
		await FileSystem.mkdir(CONSTANTS.DIR.WALLET, { recursive: true });
		const copyPromises = filesToCopy.reduce((copyPromises, file) => {
			if (!CONSTANTS.FILES.EXCLUDED.includes(file) && !CONSTANTS.FILES.SSI.includes(file))
				copyPromises.push(FileSystem.copy(FileSystem.resolvePath(CONSTANTS.DIR, file), FileSystem.resolvePath(CONSTANTS.DIR.IPFS, file), { preserveTimestamps: true, recursive: true }));
			return copyPromises;
		}, []);
		addressesToCopy.reduce((copyPromises, file) => {
			copyPromises.push(FileSystem.copy(FileSystem.resolvePath(CONSTANTS.DIR.WALLET.SOURCE, file), FileSystem.resolvePath(CONSTANTS.DIR.WALLET, file), { preserveTimestamps: true, recursive: true }));
			return copyPromises;
		}, copyPromises);
		await globalThis.Promise.all(copyPromises);
	}
	async function resolveIpfsKey(ipfsKey) {
		try { return await IPFS.NAME.resolve(ipfsKey); }
		catch { return undefined; }
	}

	// execution
	console.log(`copying files to ${CONSTANTS.DIR.IPFS} ...`);
	await copyAllFiles();
	console.log("processing SSI directives ...");
	await SSI.process();
	console.log("uploading to IPFS ...");
	const cid = await IPFS.add(CONSTANTS.DIR.IPFS);
	const ipfsKey = await IPFS.KEY.fromName(CONSTANTS.IPFS.TARGET_KEY);
	const ipfsPriorCid = await resolveIpfsKey(ipfsKey);

	if (cid === ipfsPriorCid) {
		console.log(`deploy complete, CID remains unchanged ${cid}`);
		return;
	}
	console.log(`new CID uploaded to ${cid}`);
	let isOldCidPinned = true;

	if (ipfsPriorCid !== undefined) {
		console.log(`removing old remote pin and checking if old CID is pinned...`);
		await globalThis.Promise.all([
			(async () => isOldCidPinned = await IPFS.PIN.isPinned(ipfsPriorCid))(), 
			IPFS.PIN.REMOTE.rm(ipfsPriorCid)
		]);
	}

	if (ipfsPriorCid === undefined || !isOldCidPinned) {
		console.log("pinning new CID...");
		IPFS.PIN.add(cid);
	} else {
		console.log(`updating old CID ${ipfsPriorCid} ...`);
		IPFS.PIN.update(ipfsPriorCid, cid)
	}
	console.log(`adding remote pin and publishing new CID to ${ipfsKey} ...`);
	await globalThis.Promise.all([
		IPFS.NAME.publish(cid), 
		IPFS.PIN.REMOTE.add(cid)
	]);
})().catch(console.error);